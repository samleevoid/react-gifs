{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GitExpertApp","categories","divRoot","document","querySelector","ReactDOM","render"],"mappings":"qMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAMRC,mBAAS,IAND,mBAMrCC,EANqC,KAMzBC,EANyB,KAsB5C,OAEI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SApBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,Y,uBCblBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAG,YAElB,CACIC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZ3B,kBAkBZM,GAlBY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIjC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECHb,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KA8BxC,OAxBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAGCH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAM1B,CAACpB,IAUGqB,EDrB0BK,CAAc1B,GAAlCa,EANwB,EAM7BN,KAAaa,EANgB,EAMhBA,QAIrB,OACI,oCACI,wBAAIJ,UAAU,qCAAsChB,GAElDoB,GAAW,uBAAGJ,UAAU,oCAAb,cAEb,yBAAKA,UAAU,aAEHH,EAAOJ,KAAK,SAAAC,GAAG,OAOX,kBAAC,EAAD,eACIiB,IAAKjB,EAAIC,IACJD,UEctBkB,EAxCM,WAAM,MAIa1C,mBAAS,CAAC,gBAJvB,mBAIhB2C,EAJgB,KAIJ5C,EAJI,KAgBvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAIA,4BAEQ4C,EAAWpB,KAAK,SAAAT,GAAQ,OAEpB,kBAAC,EAAD,CACI2B,IAAO3B,EACPA,SAAaA,UC9BnC8B,G,MAAUC,SAASC,cAAc,UACvCC,IAASC,OAAQ,kBAAC,EAAD,MAAkBJ,I","file":"static/js/main.a2327be4.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n    //Warning: A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components\n\n    //Aquest error és pq el useState tal com està a sota és undefined i més avall el inputValue treu aquest error, s'ha de posar string buid ''\n    // const [inputValue, setInputValue] = useState();\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        // console.log(e.target.value);\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        // console.log('Submit Fet!')\n        if( inputValue.trim().length > 2) {\n            setCategories( cats => [inputValue, ...cats] );\n            setInputValue('');\n        }\n    }\n\n    return (\n        // <> //no cal pq el form em fa de 'fragment'\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifs = async(category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=RaeICO4qpGxUDWN1rVPZjhiDFDEXQLpI`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    //Agafem del JSON només el que ens interessa:\n    const gifs = data.map( img => \n        (\n            {\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url //posem interrogacio, si no la porta no passa res\n            }\n        )\n\n    );\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( {title, url} ) => {\n    // console.log({id, title, url});\n    // console.log(props);\n    // console.log(props.img);\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","// import React, { useEffect, useState } from 'react'\nimport React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n// import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    // el usestate torna a renderitzar tot el codi, es possible que ens posem en cicles infinits, per això utilitzarem useEffect.\n\n    // const [images, setImages] = useState([]);\n    \n    const { data:images, loading } = useFetchGifs( category );\n\n    // console.log(state);\n    \n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\n\n            <div className=\"card-grid\">\n                    {\n                        images.map( img => (\n                            // <li key={ id }>{ title }</li> \n                            // <GifGridItem  \n                            //     key={img.id}\n                            //     img={ img } \n                            // /> // altra manera desestructuran molt usada:\n\n                            <GifGridItem\n                                key={img.id}\n                                { ...img }\n                            />\n                        ))                    \n                    }\n                \n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true //això estat inicial\n    });\n\n    useEffect( () => { //executem únicament si la categoria canvia\n        \n        getGifs( category )\n            .then( imgs => {\n                // setTimeout( () => {\n                    // console.log(imgs);\n                    setState({\n                        data: imgs,\n                        loading: false\n                    })\n                // }, 1000 );\n                \n            })\n\n    }, [category]) // la llista de dependencies la deixem buida així no renderitza tot el codi (prement un botó que no hi és al codi)\n\n\n    // setTimeout( () => {\n    //     setState({\n    //         data: [1,2,3,4,5,6,7],\n    //         loading: false\n    //     });\n    // }, 3000 );\n    \n    return state; //retornem objecte\n}\n","\n//RECORDA SNIPPET rafc\n\nimport React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GitExpertApp = () => {\n\n    // const categories = ['One Punch','Samurai X', 'Dragon Ball'];\n\n    const [categories, setCategories] = useState(['Dragon Ball']);\n    \n    // const handleAdd = () => {\n    //     // no utilitzar el push perquè muta una constant, utilitzar el setCategories\n    //     // categories.push('pipa');\n    //     // console.log(categories);\n\n    //     //setCategories( 'Pipa' ); //això maxaca el array original\n    //     setCategories( [...categories, 'Pipet'] ); //mantenim el que ja hi ha i afegim lo nou (operador spred)\n    // }\n\n\n    return (\n        <>\n            <h2>GitExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr />\n\n            {/* <button onClick={handleAdd}>Agregar</button> */}\n            \n            <ol>\n                {\n                    categories.map( category => \n                        // <li key={ cat }>{ cat }</li>\n                        <GifGrid \n                            key = {category}\n                            category = { category } \n                        />\n                    )\n                }\n            </ol>\n        </>\n    )\n}\n\n\nexport default GitExpertApp;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GitExpertApp from './GitExpertApp';\n\nimport './index.css';\n\n\nconst divRoot = document.querySelector('#root');\nReactDOM.render( <GitExpertApp />, divRoot );\n\n// GitExpertApp\n//"],"sourceRoot":""}